{"meta":{"title":"Hexo","subtitle":"","description":"","author":"jia","url":"https://blog.jiascu.top","root":"/"},"pages":[{"title":"Repositories","date":"2022-03-04T02:51:09.450Z","updated":"2022-03-04T02:51:09.450Z","comments":false,"path":"repository/index.html","permalink":"https://blog.jiascu.top/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"IDEA调试技巧","date":"2022-03-03T13:47:51.680Z","updated":"2021-11-09T02:47:22.381Z","comments":true,"path":"2022/03/03/IDEA调试技巧/","link":"","permalink":"https://blog.jiascu.top/2022/03/03/IDEA%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/","excerpt":"","text":"IDEA调试技巧断点统一开关Mute Breakpoints 条件断点断点处点击右键 单步调试 Step Over (F8) 下一步（行） Step Into (F7) 进入方法内部 Force Step Into (Alt + Shift + F7) 强制进入方法内部 Step Out (Shift + F8) 退出当前方法 表达式求值Evaluate Expression (Alt + F8) 计算表达式 基本用法总结、快捷键第一组按钮共8个按钮，从左到右依次如下： Show Execution Point (Alt + F10) 如果你的光标在其它行或其它页面，点击这个按钮可跳转到当前代码执行的行。 Step Over (F8) 下一步（行） 步过，一行一行地往下走，如果这一行上有方法不会进入方法。 Step Into (F7) 进入方法内部 步入，如果当前行有方法，可以进入方法内部，一般用于进入自定义方法内，不会进入官方类库的方法，如第25行的put方法。 Force Step Into (Alt + Shift + F7) 强制进入方法内部 强制步入，能进入任何方法，查看底层源码的时候可以用这个进入官方类库的方法。 Step Out (Shift + F8) 退出当前方法 步出，从步入的方法内退出到方法调用处，此时方法已执行完毕，只是还没有完成赋值。 Drop Frame 回退断点 Run to Cursor (Alt + F9) 运行到光标处 你可以将光标定位到你需要查看的那一行，然后使用这个功能，代码会运行至光标行，而不需要打断点。 Evaluate Expression (Alt + F8) 计算表达式 第二组按钮共7个按钮，从上到下依次如下： Rerun ‘xxxx’ 重新运行程序，会关闭服务后重新启动程序。 Update ‘tech’ application (Ctrl + F5) 更新程序，一般在你的代码有改动后可执行这个功能。而这个功能对应的操作则是在服务配置里 Resume Program (F9) 只在断点停留 恢复程序，比如，你在第20行和25行有两个断点，当前运行至第20行，按F9，则运行到下一个断点(即第25行)，再按F9，则运行完整个流程，因为后面已经没有断点了 Pause Program 暂停程序，启用Debug。 Stop ‘xxx’ (Ctrl + F2) 连续按两下，关闭程序。有时候你会发现关闭服务再启动时，报端口被占用，这是因为没完全关闭服务的原因，你就需要查杀所有JVM进程了。 View Breakpoints (Ctrl + Shift + F8) 查看所有断点 Mute Breakpoints 关闭断点 哑的断点，选择这个后，所有断点变为灰色，断点失效，按F9则可以直接运行完程序。再次点击，断点变为红色，有效。如果只想使某一个断点失效，可以在断点上右键取消Enabled，如图2.4，则该行断点失效。","categories":[],"tags":[]},{"title":"","slug":"else","date":"2022-03-03T13:47:51.660Z","updated":"2022-01-21T01:24:28.352Z","comments":true,"path":"2022/03/03/else/","link":"","permalink":"https://blog.jiascu.top/2022/03/03/else/","excerpt":"","text":"get、post请求区别 get：查询、搜索 post： 更新 登录注册等表单 对于博客、论坛、数据的上传下载 挂载到服务器上 clean package 数据库、JDBC、数据库连接池的区别 **&#x3D;&#x3D;JDBC(Java Database Connectivity)&#x3D;&#x3D;**： java和数据库的连接技术，sun公司推出的一套java应用程序访问数据库的技术规范。 数据库连接池 Druid、hikari：普通的JDBC数据库连接使用 DriverManager 来获取,但是会出现很多问题。为了解决传统开发中数据库的连接问题，使用&#x3D;&#x3D;数据库连接池负责分配、管理和释放数据库连接&#x3D;&#x3D;","categories":[],"tags":[]},{"title":"","slug":"快捷键","date":"2022-03-03T13:47:51.624Z","updated":"2022-03-01T07:20:06.380Z","comments":true,"path":"2022/03/03/快捷键/","link":"","permalink":"https://blog.jiascu.top/2022/03/03/%E5%BF%AB%E6%8D%B7%E9%94%AE/","excerpt":"","text":"IDEA快捷键 重写方法： alt + insert 然后点击override ctrl + o alt + enter 引入局部变量 遍历快捷键：变量.for(i) 例如： 1Cookies.forio if快捷键：变量.if main函数快捷键：psvm 1public static void main(String[] args) &#123;&#125; 定义类时， 自动生成get和set方法：alt + insert 然后点击Getter and Setter 自动生成构造方法：alt + insert 然后点击Constructor 重写toSring方法：alt + insert 然后点击tostring jsp代码注释不顶头写：ctrl + shift + &#x2F; 运行java文件快捷键：ctrl + shift +F10 Tab &#x2F; Shift + Tab ： 缩进一次所选择的代码段 Tab ：右缩进 Shift + Tab ： 左缩进 快速提取方法：Ctrl + Alt + M （鼠标右击 》Refactor 》Extract 》Method） sout等价于： 1System.out.println(); 也能通过 .sout 使用 ctrl+f : 文档中搜索 ctrl+r：文档中替换 双击shift：全局搜索类、文件等 ctrl+shift+alt：多行选中修改 idea格式化代码快捷键： 去掉空白： Ctrl + Shift + J 格式化代码： Ctrl + Alt + L（与QQ快捷键冲突，建议修改，或使用时关闭QQ） 在某一文件夹迅速运行cmd命令：路径上操作：路径前面加上cmd 直接运行 大小写转换：ctr + shift + u 函数方法添加注释：自动给IDEA类和方法添加注释（小白完美版） - 知乎 (zhihu.com) 使用方法：首先新建一个方法，然后在方法的上方输入/**，按回车Enter，即可自动生成注释信息 try-catch-finally快捷键： 默认：ctrl + alt +T(冲突) 建议修改为alt +T","categories":[],"tags":[]},{"title":"","slug":"注解","date":"2022-03-03T13:47:43.108Z","updated":"2021-11-09T02:52:40.314Z","comments":true,"path":"2022/03/03/注解/","link":"","permalink":"https://blog.jiascu.top/2022/03/03/%E6%B3%A8%E8%A7%A3/","excerpt":"","text":"springmvc123456789101112@Controller : 代表这个类会被Spring接管 被这个注解的类中所有方法，如果返回值是String，并且有具体页面可以跳转，那么就会被视图解析器解析 @RequestMapping(&quot;/t3&quot;)：请求映射 @GetMapping：get方法 @PostMapping：post方法 @PutMapping @DeleteMapping @PatchMapping@PathVariable : 让方法参数的值对应绑到一个URL模板变量上@RequestParam(&quot;username&quot;)：前端请求的参数名@ResponseBody//它不会走视图解析器。会直接返回一个字符串@RestController：@Controller + @ResponseBody spring @Autowired：自动注入，首先按类型注入，如果只有一个则成功；如果是多个，再按照名称（类首字母小写）注入，找到了成功，否则失败 @Qualifier：@Autowired是根据类型自动装配的，加上@Qualifier则可以根据byName的方式自动装配 @Resource：自动装配通过名字、类型，使用时需先导包 @Nullable：标记字段，说明该字段可以为null bean注入：放在类上，说明这个类被Spring管理了，就是bean ​ 相当于： @Component：组件，放在pojo（实体类上） @Controller：web层 @Service：service层 @Repository：dao层 @value：属性注入，可在定义变量上方和set方法上方注入，表示为该属性赋值 ​ 相当于： @scope：作用域，包括singleton和prototype等 singleton：默认的，Spring会采用单例模式创建这个对象。关闭工厂 ，所有的对象都会销毁。 prototype：多例模式。关闭工厂 ，所有的对象不会销毁。内部的垃圾回收机制会回收 @Configuration: 12//这个也会被Spring容器托管，注册到容器中，因为他本身就是一个@Component，// @Configuration代表这是一个配置类 ，就和我们之前看到的beans.xml @Import(KuangConfig2.class) 1导入别的配置文件（使用了注解@Configuration:） @ComponentScan(“com.kuang”) 12//扫描组件，相当于xml文件中的 &lt;context:component-scan base-package=&quot;com.kuang&quot;/&gt; @Bean: 123//注册一个Bean，就像但与我们之前写的一个bean标签//这个方法的名字，就相当于bean标签中的id属性//这个方法的返回值，就相当于bean标签中的class属性 springboot @ConfigurationProperties(prefix = &quot;person&quot;) 123456789 将配置文件中配置的每一个属性的值，映射到这个组件中； 告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定 参数 prefix = “person” : 将配置文件中的person下面的所有属性一一对应- ```java @Validated //数据校验 @Email(message=&quot;邮箱格式错误&quot;) 1234567891011121314151617181920212223242526272829303132 配合@Validated使用，在字段上使用，要求其必须为邮件格式，否则报错（邮箱格式错误）- jsr303检验 ```java @NotNull(message=&quot;名字不能为空&quot;) private String userName;get @Max(value=120,message=&quot;年龄最大不能查过120&quot;) private int age; @Email(message=&quot;邮箱格式错误&quot;) private String email; 空检查 @Null 验证对象是否为null @NotNull 验证对象是否不为null, 无法查检长度为0的字符串 @NotBlank 检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格. @NotEmpty 检查约束元素是否为NULL或者是EMPTY. Booelan检查 @AssertTrue 验证 Boolean 对象是否为 true @AssertFalse 验证 Boolean 对象是否为 false 长度检查 @Size(min=, max=) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内 @Length(min=, max=) string is between min and max included. 日期检查 @Past 验证 Date 和 Calendar 对象是否在当前时间之前 @Future 验证 Date 和 Calendar 对象是否在当前时间之后 @Pattern(value) 验证 String 对象是否符合正则表达式的规则 @Repository else 实现异步 @Async：在方法上加，告诉spring这是一个异步的方法 @EnableAsync：在SpringbootApplication上面加，开启异步注解功能 定时执行任务 @Scheduled（）：在方法上加，使用cron表达式 cron表达式： 秒 分 时 日 月 周几 @Scheduled(cron &#x3D; “0 * * * * 0-7”)：每天任何时候的第0秒 可在线生成 @EnableScheduling：在SpringbootApplication上面加，开启定时功能的注解","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-03-03T12:52:23.253Z","updated":"2022-03-03T12:52:23.253Z","comments":true,"path":"2022/03/03/hello-world/","link":"","permalink":"https://blog.jiascu.top/2022/03/03/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}