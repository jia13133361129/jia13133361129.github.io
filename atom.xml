<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://blog.jiascu.top/atom.xml" rel="self"/>
  
  <link href="https://blog.jiascu.top/"/>
  <updated>2021-11-09T02:47:22.381Z</updated>
  <id>https://blog.jiascu.top/</id>
  
  <author>
    <name>jia</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://blog.jiascu.top/2022/03/03/IDEA%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
    <id>https://blog.jiascu.top/2022/03/03/IDEA%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/</id>
    <published>2022-03-03T13:47:51.680Z</published>
    <updated>2021-11-09T02:47:22.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IDEA调试技巧"><a href="#IDEA调试技巧" class="headerlink" title="IDEA调试技巧"></a>IDEA调试技巧</h1><h2 id="断点统一开关"><a href="#断点统一开关" class="headerlink" title="断点统一开关"></a>断点统一开关</h2><p>Mute Breakpoints</p><img src="https://gitee.com/jia_scu/typora_picture/raw/master/img/image-20211107200557364.png" alt="image-20211107200557364" style="zoom:50%;" /><h2 id="条件断点"><a href="#条件断点" class="headerlink" title="条件断点"></a>条件断点</h2><p>断点处点击右键</p><img src="https://gitee.com/jia_scu/typora_picture/raw/master/img/image-20211107200901768.png" alt="image-20211107200901768" style="zoom:50%;" /><h2 id="单步调试"><a href="#单步调试" class="headerlink" title="单步调试"></a>单步调试</h2><ol><li><p><strong>Step Over (F8)</strong></p><p>下一步（行）</p></li><li><p><strong>Step Into (F7)</strong></p></li></ol><p>   进入方法内部</p><ol start="3"><li><p><strong>Force Step Into (Alt + Shift + F7)</strong></p><p>强制进入方法内部</p></li><li><p><strong>Step Out (Shift + F8)</strong></p><p>退出当前方法</p></li></ol><h2 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h2><p><strong>Evaluate Expression (Alt + F8)</strong></p><p>计算表达式</p><h2 id="基本用法总结、快捷键"><a href="#基本用法总结、快捷键" class="headerlink" title="基本用法总结、快捷键"></a>基本用法总结、快捷键</h2><h3 id="第一组按钮"><a href="#第一组按钮" class="headerlink" title="第一组按钮"></a>第一组按钮</h3><p>共8个按钮，从左到右依次如下：</p><p>　　　　<img src="https://gitee.com/jia_scu/typora_picture/raw/master/img/image-20211107201352441.png" alt="image-20211107201352441"></p><ol><li><p><strong>Show Execution Point (Alt + F10)</strong></p><p>如果你的光标在其它行或其它页面，点击这个按钮可跳转到当前代码执行的行。</p></li><li><p><strong>Step Over (F8)</strong></p><p>下一步（行）</p><p>步过，一行一行地往下走，如果这一行上有方法不会进入方法。</p></li><li><p><strong>Step Into (F7)</strong></p></li></ol><p>   进入方法内部</p><p>   步入，如果当前行有方法，可以进入方法内部，一般用于进入自定义方法内，不会进入官方类库的方法，如第25行的put方法。</p><ol start="4"><li><p><strong>Force Step Into (Alt + Shift + F7)</strong></p><p>强制进入方法内部</p><p>强制步入，能进入任何方法，查看底层源码的时候可以用这个进入官方类库的方法。</p></li><li><p><strong>Step Out (Shift + F8)</strong></p><p>退出当前方法</p><p>步出，从步入的方法内退出到方法调用处，此时方法已执行完毕，只是还没有完成赋值。</p></li><li><p><strong>Drop Frame</strong></p><p>回退断点</p></li><li><p><strong>Run to Cursor (Alt + F9)</strong></p><p>运行到光标处</p><p>你可以将光标定位到你需要查看的那一行，然后使用这个功能，代码会运行至光标行，而不需要打断点。</p></li><li><p><strong>Evaluate Expression (Alt + F8)</strong></p><p>计算表达式</p></li></ol><h3 id="第二组按钮"><a href="#第二组按钮" class="headerlink" title="第二组按钮"></a>第二组按钮</h3><p>共7个按钮，从上到下依次如下：</p><p> 　　<img src="https://gitee.com/jia_scu/typora_picture/raw/master/img/image-20211107201604264.png" alt="image-20211107201604264"></p><ol><li><p><strong>Rerun ‘xxxx’</strong></p><p>重新运行程序，会关闭服务后重新启动程序。</p></li><li><p><strong>Update ‘tech’ application (Ctrl + F5)</strong></p></li></ol><p>   更新程序，一般在你的代码有改动后可执行这个功能。而这个功能对应的操作则是在服务配置里</p><ol start="3"><li><p><strong>Resume Program (F9)</strong></p><p>只在断点停留</p><p>恢复程序，比如，你在第20行和25行有两个断点，当前运行至第20行，按F9，则运行到下一个断点(即第25行)，再按F9，则运行完整个流程，因为后面已经没有断点了</p></li><li><p><strong>Pause Program</strong></p><p>暂停程序，启用Debug。</p></li><li><p><strong>Stop ‘xxx’ (Ctrl + F2)</strong></p><p>连续按两下，关闭程序。有时候你会发现关闭服务再启动时，报端口被占用，这是因为没完全关闭服务的原因，你就需要查杀所有JVM进程了。</p></li><li><p><strong>View Breakpoints (Ctrl + Shift + F8)</strong></p><p>查看所有断点</p></li><li><p><strong>Mute Breakpoints</strong></p><p>关闭断点</p><p>哑的断点，选择这个后，所有断点变为灰色，断点失效，按F9则可以直接运行完程序。再次点击，断点变为红色，有效。如果只想使某一个断点失效，可以在断点上右键取消Enabled，如图2.4，则该行断点失效。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;IDEA调试技巧&quot;&gt;&lt;a href=&quot;#IDEA调试技巧&quot; class=&quot;headerlink&quot; title=&quot;IDEA调试技巧&quot;&gt;&lt;/a&gt;IDEA调试技巧&lt;/h1&gt;&lt;h2 id=&quot;断点统一开关&quot;&gt;&lt;a href=&quot;#断点统一开关&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://blog.jiascu.top/2022/03/03/else/"/>
    <id>https://blog.jiascu.top/2022/03/03/else/</id>
    <published>2022-03-03T13:47:51.660Z</published>
    <updated>2022-01-21T01:24:28.352Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>get、post请求区别</p></blockquote><p>get：查询、搜索</p><p>post：</p><ul><li>更新</li><li>登录注册等表单</li><li>对于博客、论坛、数据的上传下载</li></ul><blockquote><p>挂载到服务器上</p></blockquote><ol><li>clean</li><li>package</li><li></li></ol><blockquote><p>数据库、JDBC、数据库连接池的区别</p></blockquote><p>**&#x3D;&#x3D;JDBC(Java Database Connectivity)&#x3D;&#x3D;**： java和数据库的连接技术，sun公司推出的一套java应用程序访问数据库的技术规范。</p><p>数据库连接池 Druid、hikari：普通的JDBC数据库连接使用 DriverManager 来获取,但是会出现很多问题。为了解决传统开发中数据库的连接问题，使用&#x3D;&#x3D;数据库连接池负责分配、管理和释放数据库连接&#x3D;&#x3D;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;get、post请求区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;get：查询、搜索&lt;/p&gt;
&lt;p&gt;post：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更新&lt;/li&gt;
&lt;li&gt;登录注册等表单&lt;/li&gt;
&lt;li&gt;对于博客、论坛、数据的上传下载&lt;/li&gt;
&lt;/ul</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://blog.jiascu.top/2022/03/03/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://blog.jiascu.top/2022/03/03/%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2022-03-03T13:47:51.624Z</published>
    <updated>2022-03-01T07:20:06.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IDEA快捷键"><a href="#IDEA快捷键" class="headerlink" title="IDEA快捷键"></a>IDEA快捷键</h1><ol><li><p>重写方法：</p><ul><li>alt + insert  然后点击override</li><li>ctrl + o</li></ul></li><li><p>alt + enter</p><ul><li>引入局部变量</li><li></li></ul></li><li><p>遍历快捷键：变量.for(i)</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookies.forio</span><br></pre></td></tr></table></figure><p>if快捷键：变量.if</p></li><li><p>main函数快捷键：psvm</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义类时，</p><ul><li>自动生成get和set方法：alt + insert 然后点击Getter and Setter</li><li>自动生成构造方法：alt + insert 然后点击Constructor</li><li>重写toSring方法：alt + insert 然后点击tostring</li></ul></li><li><p>jsp代码注释不顶头写：ctrl + shift + &#x2F;</p></li><li><p>运行java文件快捷键：ctrl + shift +F10</p></li><li><p>Tab &#x2F; Shift + Tab ： 缩进一次所选择的代码段</p><ul><li>Tab ：右缩进</li><li>Shift + Tab ： 左缩进</li></ul></li><li><p>快速提取方法：Ctrl + Alt + M （鼠标右击 》Refactor 》Extract 》Method）</p></li><li><p>sout等价于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println();</span><br></pre></td></tr></table></figure><p>也能通过     .sout    使用</p></li><li><p>ctrl+f : 文档中搜索</p><p>ctrl+r：文档中替换</p></li><li><p>双击shift：全局搜索类、文件等</p></li><li><p>ctrl+shift+alt：多行选中修改</p></li><li><p>idea<strong>格式化代码</strong>快捷键：</p><ul><li><strong>去掉空白： Ctrl + Shift + J</strong></li><li><strong>格式化代码： Ctrl + Alt + L</strong>（与QQ快捷键冲突，建议修改，或使用时关闭QQ）</li></ul></li><li><p>在某一文件夹迅速运行cmd命令：路径上操作：路径前面加上cmd 直接运行</p></li><li><p>大小写转换：ctr + shift + u</p></li><li><p>函数方法添加注释：<a href="https://zhuanlan.zhihu.com/p/386392249">自动给IDEA类和方法添加注释（小白完美版） - 知乎 (zhihu.com)</a></p><p>使用方法：首先新建一个方法，然后在方法的上方输入<code>/**</code>，按回车<code>Enter</code>，即可自动生成注释信息</p></li><li><p>try-catch-finally快捷键：</p><ul><li>默认：ctrl + alt +T(冲突)</li><li>建议修改为alt +T</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;IDEA快捷键&quot;&gt;&lt;a href=&quot;#IDEA快捷键&quot; class=&quot;headerlink&quot; title=&quot;IDEA快捷键&quot;&gt;&lt;/a&gt;IDEA快捷键&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;重写方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;alt + insert  然后点击over</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://blog.jiascu.top/2022/03/03/%E6%B3%A8%E8%A7%A3/"/>
    <id>https://blog.jiascu.top/2022/03/03/%E6%B3%A8%E8%A7%A3/</id>
    <published>2022-03-03T13:47:43.108Z</published>
    <updated>2021-11-09T02:52:40.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springmvc"><a href="#springmvc" class="headerlink" title="springmvc"></a>springmvc</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span> : 代表这个类会被Spring接管</span><br><span class="line">  被这个注解的类中所有方法，如果返回值是String，并且有具体页面可以跳转，那么就会被视图解析器解析 <span class="meta">@RequestMapping(&quot;/t3&quot;)</span>：请求映射</span><br><span class="line"><span class="meta">@GetMapping</span>：get方法</span><br><span class="line"><span class="meta">@PostMapping</span>：post方法</span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="meta">@PatchMapping</span></span><br><span class="line"><span class="meta">@PathVariable</span> : 让方法参数的值对应绑到一个URL模板变量上</span><br><span class="line"><span class="meta">@RequestParam(&quot;username&quot;)</span>：前端请求的参数名</span><br><span class="line"></span><br><span class="line"><span class="meta">@ResponseBody</span><span class="comment">//它不会走视图解析器。会直接返回一个字符串</span></span><br><span class="line"><span class="meta">@RestController</span>：<span class="meta">@Controller</span> + <span class="meta">@ResponseBody</span></span><br></pre></td></tr></table></figure><h1 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h1><ul><li><p>@Autowired：自动注入，首先按类型注入，如果只有一个则成功；如果是多个，再按照名称（类首字母小写）注入，找到了成功，否则失败</p></li><li><p>@Qualifier：@Autowired是根据类型自动装配的，加上@Qualifier则可以根据byName的方式自动装配</p></li><li><p>@Resource：自动装配通过名字、类型，使用时需先导包</p></li><li><p>@Nullable：标记字段，说明该字段可以为null</p></li><li><p>bean注入：放在类上，说明这个类被Spring管理了，就是bean</p><p>​                  相当于：<bean class="com.kuang.pojo.User" id="user"/></p><ul><li><p>@Component：组件，放在pojo（实体类上）</p></li><li><p>@Controller：web层 </p></li><li><p>@Service：service层 </p></li><li><p>@Repository：dao层</p></li></ul></li><li><p>@value：属性注入，可在定义变量上方和set方法上方注入，表示为该属性赋值</p><p>​                相当于：<property name="name" value="狂神"/></p></li><li><p>@scope：作用域，包括singleton和prototype等</p><ul><li><pre><code>        singleton：默认的，Spring会采用单例模式创建这个对象。关闭工厂 ，所有的对象都会销毁。 </code></pre></li><li><pre><code>        prototype：多例模式。关闭工厂 ，所有的对象不会销毁。内部的垃圾回收机制会回收</code></pre></li></ul></li><li><p>@Configuration:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个也会被Spring容器托管，注册到容器中，因为他本身就是一个@Component，</span></span><br><span class="line"><span class="comment">// @Configuration代表这是一个配置类 ，就和我们之前看到的beans.xml</span></span><br></pre></td></tr></table></figure></li><li><p>@Import(KuangConfig2.class)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">导入别的配置文件（使用了注解<span class="meta">@Configuration</span>:）</span><br></pre></td></tr></table></figure></li><li><p>@ComponentScan(“com.kuang”)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//扫描组件，相当于xml文件中的  </span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>@Bean:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册一个Bean，就像但与我们之前写的一个bean标签</span></span><br><span class="line"><span class="comment">//这个方法的名字，就相当于bean标签中的id属性</span></span><br><span class="line"><span class="comment">//这个方法的返回值，就相当于bean标签中的class属性</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="springboot"><a href="#springboot" class="headerlink" title="springboot"></a>springboot</h1><ul><li><pre><code class="java">@ConfigurationProperties(prefix = &quot;person&quot;)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  将配置文件中配置的每一个属性的值，映射到这个组件中； </span><br><span class="line"></span><br><span class="line">  告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定 参数 prefix = “person” : </span><br><span class="line"></span><br><span class="line">  将配置文件中的person下面的所有属性一一对应</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  @Validated //数据校验</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="java">@Email(message=&quot;邮箱格式错误&quot;)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  配合@Validated使用，在字段上使用，要求其必须为邮件格式，否则报错（邮箱格式错误）</span><br><span class="line"></span><br><span class="line">- jsr303检验</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  @NotNull(message=&quot;名字不能为空&quot;)</span><br><span class="line">  private String userName;get</span><br><span class="line">  @Max(value=120,message=&quot;年龄最大不能查过120&quot;)</span><br><span class="line">  private int age;</span><br><span class="line">  @Email(message=&quot;邮箱格式错误&quot;)</span><br><span class="line">  private String email;</span><br><span class="line">  </span><br><span class="line">  空检查</span><br><span class="line">  @Null       验证对象是否为null</span><br><span class="line">  @NotNull    验证对象是否不为null, 无法查检长度为0的字符串</span><br><span class="line">  @NotBlank   检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格.</span><br><span class="line">  @NotEmpty   检查约束元素是否为NULL或者是EMPTY.</span><br><span class="line">      </span><br><span class="line">  Booelan检查</span><br><span class="line">  @AssertTrue     验证 Boolean 对象是否为 true  </span><br><span class="line">  @AssertFalse    验证 Boolean 对象是否为 false  </span><br><span class="line">      </span><br><span class="line">  长度检查</span><br><span class="line">  @Size(min=, max=) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内  </span><br><span class="line">  @Length(min=, max=) string is between min and max included.</span><br><span class="line">  </span><br><span class="line">  日期检查</span><br><span class="line">  @Past       验证 Date 和 Calendar 对象是否在当前时间之前  </span><br><span class="line">  @Future     验证 Date 和 Calendar 对象是否在当前时间之后  </span><br><span class="line">  @Pattern(value)    验证 String 对象是否符合正则表达式的规则</span><br><span class="line">  </span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="java">@Repository  </code></pre></li></ul><h1 id="else"><a href="#else" class="headerlink" title="else"></a>else</h1><ol><li>实现异步<ul><li>@Async：在方法上加，告诉spring这是一个异步的方法</li><li>@EnableAsync：在SpringbootApplication上面加，开启异步注解功能</li></ul></li><li>定时执行任务<ul><li>@Scheduled（）：在方法上加，使用cron表达式</li><li>cron表达式：<ul><li>秒 分 时 日 月 周几</li><li>@Scheduled(cron &#x3D; “0 * * * * 0-7”)：每天任何时候的第0秒</li><li>可在线生成</li></ul></li><li>@EnableScheduling：在SpringbootApplication上面加，开启定时功能的注解</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;springmvc&quot;&gt;&lt;a href=&quot;#springmvc&quot; class=&quot;headerlink&quot; title=&quot;springmvc&quot;&gt;&lt;/a&gt;springmvc&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blog.jiascu.top/2022/03/03/hello-world/"/>
    <id>https://blog.jiascu.top/2022/03/03/hello-world/</id>
    <published>2022-03-03T12:52:23.253Z</published>
    <updated>2022-03-03T12:52:23.253Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
